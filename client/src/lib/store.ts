import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { Octokit } from '@octokit/rest';

export interface User {
  id: string;
  name: string;
  username: string;
  avatar: string;
  token?: string;
}

export interface Review {
  id: string;
  repoUrl: string;
  prNumber: number;
  createdAt: Date;
  summary: string;
  strengths: string[];
  concerns: string[];
  suggestions: string[];
  githubCommentId?: number;
}

interface AppState {
  user: User | null;
  reviews: Review[];
  setUser: (user: User | null) => void;
  addReview: (review: Review) => void;
  updateReview: (id: string, review: Partial<Review>) => void;
  clearReviews: () => void;
  logout: () => void;
  postToGitHub: (review: Review) => Promise<number | null>;
}

export const useAppStore = create<AppState>()(
  persist(
    (set, get) => ({
      user: null,
      reviews: [],
      setUser: (user) => set({ user }),
      addReview: (review) => set((state) => ({ 
        reviews: [review, ...state.reviews].slice(0, 10) 
      })),
      updateReview: (id, updatedReview) => set((state) => ({
        reviews: state.reviews.map(review =>
          review.id === id ? { ...review, ...updatedReview } : review
        )
      })),
      clearReviews: () => set({ reviews: [] }),
      logout: () => set({ user: null, reviews: [] }),
      postToGitHub: async (review) => {
        const user = get().user;
        if (!user?.token) return null;

        try {
          const octokit = new Octokit({ auth: user.token });
          const repoInfo = parseGitHubUrl(review.repoUrl);
          
          if (!repoInfo) return null;

          const comment = formatReviewComment(review);
          
          const response = await octokit.issues.createComment({
            owner: repoInfo.owner,
            repo: repoInfo.repo,
            issue_number: review.prNumber,
            body: comment
          });

          return response.data.id;
        } catch (error) {
          console.error('Failed to post review to GitHub:', error);
          return null;
        }
      }
    }),
    {
      name: 'pr-sensei-storage',
    }
  )
);

function parseGitHubUrl(url: string): { owner: string; repo: string } | null {
  try {
    const urlObj = new URL(url);
    if (!urlObj.hostname.includes('github.com')) return null;
    
    const pathSegments = urlObj.pathname.split('/').filter(Boolean);
    if (pathSegments.length < 2) return null;
    
    return {
      owner: pathSegments[0],
      repo: pathSegments[1],
    };
  } catch (error) {
    return null;
  }
}

function formatReviewComment(review: Review): string {
  return `## PR Sensei Review

### Summary
${review.summary}

### Strengths
${review.strengths.map(s => `- ${s}`).join('\n')}

### Concerns
${review.concerns.map(c => `- ${c}`).join('\n')}

### Suggestions
${review.suggestions.map(s => `- ${s}`).join('\n')}

---
*Generated by [PR Sensei](https://pr-sensei.dev)*`;
}